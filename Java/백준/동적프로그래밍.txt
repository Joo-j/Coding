동적 프로그래밍
개념: 큰 문제의 해답에 그보다 작은 문제의 해답이 포함되어 있을 때 프로그램의 속도를 비약적으로 향상시킵니다.

대표적인 예시
피보나치 수열: 자기 자신은 자신과 닮은 자기보다 작은 것들로 구성
1 1 2 3 5 8 13 21 34
앞에 있는 두 숫자를 더해서 자신을 만듬, 이런식으로 자기 자신은 자기보다 작은 두 숫자의 합으로 이루어져있음
f(n)=f(n-1)+f(n-2)
f(1)=(f2)=1


동적프로그래밍을 사용하지 않은 피보나치

import java.util.Scanner;

public class Main {

//n번째 수열이 무엇인지 알려주는 함수
	public static int fibonacci(int n) {
		if(n==1||n==2) return 1;
		else return fibonacci(n-1)+fibonacci(n-2);
	}
	
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		System.out.println(fibonacci(n));

	}

}

이렇게 하면 100과 같이 큰 수번째의 수열을 구할 수 없다 
너무 오래 걸려서 평생 계산해도 못한다고 한다
    10
  9    8
8 7   7 6
-> 즉 2^n 번 만큼 호출, 10이라면 2^10 정도를 요구한다는 소리
이런 지수적 함수를 현실 시간내에 구할 수 없는 함수라고 합니다.
현실적으로 문제를 풀수 없다고 보는 것이죠.
따라서 이를 해결하기 위해서 동적프로그래밍을 구현할 필요가 있습니다
10을 출력했을때 그와 작은 문제인 9와 8로 이루어지는 것을 알 수 있는데요. 아까 말햇듯이 아까 자기보다 작은값으로 자기가 구성되어있을때 동적프로그래밍이 가능하다고 했습니다. 문제는 8과 같이 중복 호출이 일어난다는 것인데요. 값이 크면 클수록 중복호출이 많이 일어나게 되있습니다. 이런 중복호출을 막기위해 이 8이라는 피보나치 수열의 값을 구한적이 있다면 이 값을 저장해서 나중에 필요할때 이 값을 그대로 보여줄 수 있는거죠 


동적프로그래밍을 사용한 피보나치

import java.util.Scanner;

public class Main {

	static int f[]=new int[100];	
	
	//몇번째 수열인지
	public static int fibonacci(int n) {
		
		if(f[n]!='\0') return f[n];
		else{
		if(n==1||n==2) f[n]=1;
		else f[n]=fibonacci(n-1)+fibonacci(n-2);	
		}
		return f[n];
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		System.out.println(fibonacci(n));

	}

}




행렬의 경로 문제: 행렬 (1,1)부터 시작해서 (n,n) 까지 가는 최대, 최소의 경로를 찾는 문제, 경로는 가로 세로만으로 이루어져있다.

1,1에서 첫번째 행과 열을 자신을 더한 값으로 초기화하고 둘 중 어느 값이 큰지에 따라 경로를 계속 결정하면 최대 경로를 찾을 수 있다.


import java.util.Scanner;

public class Main {

	public static int dp(int d[][], int n) {
		int cost[][]=new int[n][n];
		cost[0][0]=d[0][0];
		for(int i=1; i<n; i++) {
			cost[i][0]=d[i][0]+cost[i-1][0];
		}
		for(int j=1; j<n; j++) {
			cost[0][j]=d[0][j]+cost[0][j-1];
		}
		
		for(int i=1; i<n; i++) {
			for(int j=1; j<n; j++) {
				cost[i][j]=d[i][j]+max(cost[i-1][j], cost[i][j-1]); //핵심, 자신보다 작은 값들을 이용해서 구해나감,값을 저장해 나가면서 왼쪽 오른쪽 중 큰값을 더해나감
			}
		}
		
		return cost[n-1][n-1]; //마지막 배열 인덱스, n이 5면 인덱스는 0부터 4니까
	}
	
	public static int max(int a, int b) {
		return (a>b)?a:b;
 	}
	
	public static void main(String[] args) {
		int d[][]=new int[5][5];
		for(int i=0; i<5; i++) {
			for(int j=0; j<5; j++) {
			d[i][j]=(int)(Math.random()*10);	
			}
			}
		
		for(int i=0; i<5; i++) {
			for(int j=0; j<5; j++) {
				System.out.print(d[i][j]);
			}
			System.out.println();
		}
		
		System.out.println();
		System.out.println();
		System.out.println(dp(d, 5));

	}

}


최대 연속 부분수열의 합
정수의 배열이 주어졌을때 수많은 부분배열 중에서 가장 큰값을 갖는 배열의 값을 구하는 문제

알고리즘
1. 수의 합을 반복적으로 구합니다
2. 이때 합이 음수이면 그 다음 수부터 다시 시작합니다.
3. 합의 최댓값을 도출합니다. 

-3 3 5 -3 -7 9 -2 10 -5 -2
현재 합:       0, 3, 8, 5, 0, 9, 7, 17, 12, 10
현재 최댓값: 0, 3, 8, 8, 8, 9, 9, 17, 17, 17



public class Main {

	public static int getMaxSubsequence(int a[],int number) {
		int temp=0, max=0, i;
		for(i=0; i<number; i++) {
			temp+=a[i];
			if(temp>max) max=temp;
			else if(temp<0) temp=0;
		}
		return max;
	}
	
	public static int getMaxElement(int a[],int number) {
		int max=-100, i;
		for(i=0; i<number; i++) {
			if(max<a[i]) max=a[i];
		}
		
		return max;
	}
	
	public static void main(String[] args) {
		int number=10;
		int a[]=new int[number];
				
		a[0]=-3;
		a[1]=3;
		a[2]=5;
		a[3]=-3;
		a[4]=-7;
		a[5]= 9;
		a[6]=-2;
		a[7]=10;
		a[8]=-5;
		a[9]=-2;
		
		System.out.println(getMaxSubsequence(a, number)+"\n"+getMaxElement(a, number));
	}
}








