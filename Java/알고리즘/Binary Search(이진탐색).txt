이진 탐색 알고리즘은 적당한 값을 지정하고, 그 범위를 좁혀나가면서 탐색해 나가는 알고리즘으로, 여러 탐색 알고리즘 중에 하나입니다.
특징으로는 탐색하는 수들이 오름차순 or 내림차순으로 정렬되어 있어야 한다는 점입니다.
O(log n)의 시간 복잡도를 가지는 알고리즘입니다.. 2 ^ 100 개의 수들도 겨우 100번의 반복으로 찾아낸다는 뜻이죠.
위의 조건만 성립한다면 엄청나게 시간이 단축됩니다.
과정은 아래와 같습니다.
수들이 오름차순으로 정렬되었다는 조건 기준, 내림차순으로 정렬되었을 경우에는 4번을 반대로 합니다.
1. 수들의 가운데에 있는 수를 고른다.
2. 고른 수가 찾으려는 수라면 종료한다.
3. 이 수를 기준으로 반으로 나눈다.
4. 이 수가 찾으려는 수보다 작다면 오른쪽 조각, 크다면 왼쪽 조각을 고른다.
5. 1 ~ 4의 과정을 반복한다.
[출처] 이진 탐색(binary search) 알고리즘|작성자 Aqxecs


while (true) {
			if (start > end) { // start가 end를 넘어간다면, 탐색 종료
				break;
			}

			int mid = (start + end) / 2; // 배정할 예산을 정해줌

			long tmpSum = 0; // mid대로 예산을 정해줬을때, 조건에 부합하는지 확인하기 위한 합 변수
			for (int i = 0; i < budgets.length; i++) {
				if (budgets[i] > mid) { // 요청한 예산이 설정한 예산보다 큰 경우, 
					tmpSum += mid; // 설정한 예산으로 더해줌
				} else { // 요청한 예산으로 가능할 때,
					tmpSum += budgets[i]; // 요청한 예산을 더해줌
				}
			}

			if (tmpSum > M) { // 주어진 M보다 크다면, 더 적게 예산을 배정함
				end = mid - 1;
			} else { // 주어진 M보다 작다면, 더 많이 예산을 배정함
				start = mid + 1;
				answer = Math.max(answer, mid); // 정답 갱신
			}
		}
[출처] [프로그래머스][level3] 예산|작성자 Ricky

