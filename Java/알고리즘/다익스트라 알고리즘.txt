

다익스트라 알고리즘은 다이나믹 프로그래밍을 활용한 대표적인 최단 경로 탐색 알고리즘이다
흔히 인공위성 GPS 소프트웨어 등에서 가장 많이 사용된다.
다익스트라 알고리즘은 특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로를 알려준다.
다만 이 때 음의 간선을 포함할 수 없다. 물론 현실 세계에서는 음의 간선이 존재하지 않기 때문에 다익스트라는 현실 세계에 사용하기 매우 적합한 알고리즘 중 하나라고 할 수 있다.

다익스트라 알고리즘이 다이나믹 프로그램 문제인 이유는 최단거리는 여러 개의 최단 거리로 이루어져있기 때문이다. 작은 문제가 큰 문제의 부분집합에 속해있다고 볼 수 있다. 기본적으로 다익스트라는 하나의 최단 거리를 구할 때 그 이전까지 구했던 최단 거리 정보를 그대로 사용한다는 특징이 있다.

정렬을 사용하기 때문에, 정렬 이후에 가장 적은 것을 선택하기 때문에 그리디 알고리즘으로 분류가 되기도 한다.


1부터 다른 모든 노드로 가는 최단 경로를 구해야 한다.
 

나중에 컴퓨터는 경로 1->3의 비용이 6인데에 반해 1->2->3이 총 비용 4로 더 저렴하다는 것을 알게된다. 이때 현재까지 알고 있던 3으로 가는 최소 비용 6을 새롭게 4로 갱신한다. 다시 말해 다익스트라 알고리즘은 현재까지 알고 있던 최단 경로를 계속해서 갱신한다.


1.출발 노드를 설정한다.
2.출발 노드를 기준으로 각 노드의 최소 비용을 저장한다.
3.방문하지 않은 노드 중에서 가장 비용이 적은 노드를 선택한다.
4.해당 노드를 거쳐서 특정한 노드로 가는 경우를 고려하여 최소 비용을 갱신한다.
5.위 과정에서 3~4번을 반복한다.



그래프는 실제로 컴퓨터 안에서 처리할 때 이차원 배열 형태로 처리해야 한다. 특정 행에서 열로 가는 비용을 이차원 배열로 표현한다. 1행 3열의 값이 5라면 1번 노드에서 3번 노드로 가는 비용이 5라는 것을 의미한다.


처음의 배열은 그래프에 연결된 대로 비용을 갱신해주고 연결되어있지 않은 부분은 "무한"으로 표시한다.  

출발 노드에서 시작해서 방문하지 않은 노드 중 가장 적은 비용을 가진 노드를 탐색하고 확정적인 비용은 배열에 기록한다. 
그렇게 노드를 이동해가면서 그 노드와 연결된 노드 중 적은 비용을 노드를 방문하여 비용을 배열에 기록한다 이걸 반복하면서 1-3의 비용은 5지만 1-4-3의 비용은 4라는 것을 알면서 1-3을 5에서 4로 갱신해준다. 이런식으로 전체 배열을 갱신해준다. 무한이였던 값들도 이런 과정들의 반복으로 인해 연결이 될 수 있다는것을 알게 되면 무한보다 어떠한 비용이 더 작기 때문에 그 값을 갱신해준다.
출발 노드가 1이라면 1에서 2, 3, 4, 5, 6, 7, 8 등등 의 노드까지의 최소비용을 구해준다.


int number = 6;
int INF = 100000000; //무한 표현

//전체 그래프를 초기화
int a[6][6] = {
{0, 2, 5, 1, INF, INF},
{2, 0, 3, 2, INF, INF},
{5, 3, 0, 3, 1, 5},
{1, 2, 3, 0, 1, INF},
{INF, INF, 1, 1, 0, 2},
{INF, INF, 5, INF, 2, 0},
};

bool v[6]; //방문한 노드 여부
int d[6]; //출발지점 노드 1에서부터의 각 노드까지의 최단 거리

//가장 최소 거리를 가지는 정점을 반환합니다.
int getSmallIndex(){
int min = INF;
int index = 0;
for(int i = 0; i < number; i++){
if(d[i] < min && !v[i]){
min = d[i];
index = i;
}
}
return index;
}

//다익스트라를 수행하는 함수
void dijkstra(int start){
for(int i = 0; i < number; i++){
d[i] = a[start][i];
}
v[start] = true;
for(int i = 0; i< number - 2; i++){
int current = getSmallIndex(); //현재 탐색하고 있는 노드에 연결되어있는 노드 중에 최소비용인 노드값을 저장
v[current] = true; //방문했다고 표시
for(int j = 0 ; j < 6; j++){
if(!v[j]){ //방문하지 않은 노드에
if(d[current] + a[current][j] < d[j]) { //기존에 있던 최소 비용보다 노드를 거쳐 j까지의 최소거리가 더 적다면 갱신
d[j] = d[current] + a[current][j];
}
}
}
}
}

int main(void){
dijkstra(0);
for(int i = 0; i < number; i++){
printf("%d", d[i]);
}
}



위 알고리즘은 최소비용을 단순히 선형탐색으로 구현한 것이다.
이렇게 작성하는 경우 다익스트라의 복잡도가 O(N^2)으로 형성된다. (getsmallnumber함수와 갱신할때의 for문 때문에)따라서 최대한 빠르게 작동시켜야 하는 경우 힙 구조를 활용하여 시간 복잡도 O(N*logN)을 만들 수 있다. 특히 위와 같은 소스코드는 정점의 갯수가 많은데 간선은 적을 때 치명적일 정도로 비효율적으로 작동할 수 있다.



int number = 6;
int INF = 100000000;

vector<pair<int, int> > a[7]; //간선 정보(노드, 거리)
int d[7]; //출발 노드와 연결된 노드와의 최소 비용

void dijkstra(int start){
d[start] = 0;
priority_queue<pair<int,int>> pq; // 힙 구조(가장 큰 값이 맨위에 있는 구조), 가까운 순서대로 처리하므로 큐를 사용한다.
while(!pq.empty()){ //비어있지 않다면 계속 꺼내준다
int current = pq.top().first; //현재 노드

//priority queue는 기본적으로 더 큰값이 위로가기 때문에 짧은 거리가 먼저 오도록 -를 곱해준다.
int distacne = -pq.top().second;
pq.pop();

//최단 거리가 아닌 경우 스킵
if(d[current]<distance) continue;

for(int i = 0; i< a[current].size(); i++)}
//선택된 노드의 인접 노드
int next = a[current][i].first;

//선택된 노드 거쳐서 인접 노드로 가는 비용
int nextDistance = distance + a[current][i].second;

//기존의 최소 비용보다 더 저렴하다면 교체한다.
if(nextDistance < d[next]){
d[next] = nextDistance;
pq.push(make_pair(next, -nextDistance));
}
}
}
}

int main(void){
//기본적으로 연결되지 않은 경우 비용은 무한
for(int i = 1; i <= number; 1*i++){
d[i] = INF;
}

a[1].push_back(make_pair(2,2));
a[1].push_back(make_pair(3,5));
a[1].push_back(make_pair(4,1));

a[2].push_back(make_pair(1,2));
a[2].push_back(make_pair(3,3));
a[2].push_back(make_pair(4,2));

a[3].push_back(make_pair(1,5));
a[3].push_back(make_pair(2,3));
a[3].push_back(make_pair(4,3));
a[3].push_back(make_pair(5,1));
a[3].push_back(make_pair(6,5));

a[4].push_back(make_pair(1,1));
a[4].push_back(make_pair(2,2));
a[4].push_back(make_pair(3,3));
a[4].push_back(make_pair(5,1));

a[5].push_back(make_pair(3,1));
a[5].push_back(make_pair(4,1));
a[5].push_back(make_pair(6,2));

a[6].push_back(make_pair(3,5));
a[6].push_back(make_pair(5,2));

dijkstra(1);

//결과 출력
for(int i = 1; i <= number; i++){
printf("%d ", d[i]);
}
}

//0 2 3 1 2 4


위 알고리즘은 인접 리스트 방식을 확용하여 시간 복잡도 O(N*logN)으로 구현
이 경우 정점에 비해 간선의 갯수가 비정상적으로 적어도 안정적으로 처리할 수 있다.


