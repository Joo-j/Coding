


크루스칼 알고리즘은 가장 적은 비용으로 모든 노드를 연결하기 위해 사용하는 알고리즘이다. 다시 말해 최소 비용 신장 트리를 만들기 위한 대표적인 알고리즘이라고 할 수 있다.
흔히 여러개의 도시가 있을때 각 도시를 도로를 이용해 연결하고자 할 때 비용을 최소한으로 하고자 할때 실제로 적용되는 알고리즘이다

노드=정점=도시
간선=거리=비용

최소 비용 신장 트리의 간선의 개수는 전체 노드개수의 -1 

최소 비용 신장 트리
모든 간선들을 거리를 기준으로 먼저 오름차순 정렬을 수행한다
정렬된 순서에 맞게 그래프에 포함시킨다
포함시키기전에 사이클 테이블을 확인한다
사이클을 형성하는 경우 간선을 포함하지 않는다
(사이클 = 세개 이상의 노드가 서로 연결되어있는 상태)

 
int getParent(int parent[], int x){
if(paraent[x] == x) return x;
return parent[x] = getParent(parent, parent[x]);
}

int unionParent(int parent[], int a, int b){
a = getParent(parent, a);
b = getParent(parent, b);
if(a < b) parent[b] = a;
else parent[a] = b;
}

int findParent(int parent[], int a, int b){
a = getParent(parent, a);
b = getParent(parent, b);
if(a == b) return 1;
return 0;
}

//간선 클래스 선언
Class Edge{
public:
int node[2];
int distance;
Edge(int a, int b, int distance){
this->node[0] = a;
this->node[1] = b;
this->distance = distance;
}
bool operator < (Edge &edge) {
return this->distance < edge.distance;
}
};


int main(void){
int n = 7; //정점 개수
int m = 11; //간선 개수

vector<Edge> v;

//정점간의 간선 거리 정보
v.push_back(Edge(1, 7, 12));
v.push_back(Edge(1, 4, 28));
v.push_back(Edge(1, 2, 67));
v.push_back(Edge(1, 5, 17));
v.push_back(Edge(2, 4, 24));
v.push_back(Edge(2, 5, 62));
v.push_back(Edge(3, 5, 20));
v.push_back(Edge(3, 6, 37));
v.push_back(Edge(3, 7, 13));
v.push_back(Edge(4, 6, 45));
v.push_back(Edge(5, 7, 73));

//간선의 비용을 기준으로 오름차순 정렬
sort(v.begin(), v.end());

//각 정점이 포함된 그래프가 어디인지 저장
int parent[n];
for(int i = 0; i < n; i++){
parent[i]= i ;
}

int sum = 0;
for(int i = 0; i< v.size(); i++){
//사이클이 발생하지 않는 경우 그래프에 포함
if(!findParent(parent, v[i].node[0]-1. v[i].node[1]-1)){
sum += v[i].distance;
unionParent(parent, v[i].node[0] - 1, v[i].node[1] - 1);
}
//findParent를 통해 같은 그래프에 속하는지 않는 것을 확인, 이유는 최소비용트리에서는 그래프에서 정점간에 간선은 무조건 1개여야 하기 때문에 같은 그래프로 인식된다면 이미 간선이 존재한다는 의미이므로 연결하지않는다, 반면 서로 연결되어있지 않다는 것을 확인(사이클이 아닌것을 확인)한다면 union 파인드로 연결
}

printf("%d\n", sum);
}











