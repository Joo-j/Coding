일종의 미완성 클래스라고 할 수 있는 추상클래스를 제공한다.
추상클래스는 직접적으로 객체 인스턴스를 생성할 수 없다. 하지만 새로운 클래스를 작성하는데 밑바탕이 되는 역할을 해준다는 것에서 의의가 있다. 어느정도 미리 설계로서 틀을 갖추고 클래스를 작성할 수 있게 한다는 기능적인 측면에서의 의미가 있다.

사각형 원 삼각형 등의 클래스 등등은 넓이가 존재한다는 공통점이있고 자신의 생김새를 출력할 수 있는 함수가 존재해야한다 그렇기 때문에 그러한 기능들을 반드시 구현할 수 있도록 추상클래스가 설계적인 측면에서 추상클래스를 명시하고 그 추상클래스를 상속받은 클래스들은 해당 함수들을 구현하도록 되어있는거죠. 이런식으로 미리 어떤 클래스를 구성하기 전에 이 클래스에는 이러한 내용들이 들어갈거야 라고 알려주는 것이 추상이라고 한다.

추상클래스를 사용하려면 꼭 상속을 받아야 하며 상속받은 모든 추상 메소드는 반드시 구현을 해줘야한다.

//추상클래스, 어떤 기능들이 구현될지에 대한 내용을 담은 클래스
abstract class Player {
abstract void play(String songName);
abstract void pause();
abstract void stop();
}


//추상클래스를 상속받아 그 함수들을 실제로 구현 후 사용
//사용하지 않을거면 추상클래스를 사용하지 않아야함
public class Main extends Player {

	public static void main(String[] args) {

//static으로 만들어진 main이기 때문에 함수들도 static을 붙여서 만들어줘야 사용이 가능하지만, 메인객체를 만들어서 사용하면 됨

		Main m=new Main();
		 m.play("사랑했나봐-윤도현"); 
		 m.pause();
		 m.stop();
	}

	@Override
	void play(String songName) {
		System.out.println(songName+"곡을 재생합니다");
	}

	@Override
	void pause() {
		System.out.println("곡을 잠시 정지합니다");		
	}

	@Override
	void stop() {
		System.out.println("곡을 정지합니다");

	}
}

어떤 함수를 구현하는지를 머리속으로 그리고 있어야하고 복잡해질 수 있는데 미리 어떤 함수들을 사용하는지 정해놓음으로써 설계해놓음으로써 프로그램을 더 깔끔하게 작성할 수 있는 것 입니다.




public class Main {

	public static void main(String[] args) {
    
		Dog dog = new Dog();
		Cat cat = new Cat();
		
		dog.crying();
		cat.crying();
		
	}
}



public class Cat extends Animal{

	
	void crying() {
    System.out.println("야옹~야옹~");		
	}

}



public class Cat extends Animal{

	
	void crying() {
    System.out.println("야옹~야옹~");		
	}

}



abstract class Animal {
abstract void crying();
}



