클래스들을 만들어 정의해주고 메인에서 사용


public class Main {
	
	public static void main(String[] args) {
    
		Node one = new Node(10, 20); //각각의 좌표에 10과 20이 들어감
		Node two = new Node(30, 40);
		Node result = one.getCenter(two);
        System.out.println("x:"+result.getX()+"y:"+result.getY());		

	}
}



public class Node {

	private int x; //객체지향 프로그래밍은 보안을 중요하게 생각하기 때문에 x와 y를 외부에서 함부로 바꿀 수 없도록 private으로 만들어줌
	private int y;
	
	public int getX(){ //getX는 private으로 선언된 값들을 가지고 오기 위해서 외부에서 접근하기 위한 public 함수이다.
		return x; //x를 반환하도록
	}
	
	public int getY() {
		return y;
	}
	
	public void setX(int x){ //x의 값을 설정하는 함수
		this.x=x; //this.x는 자신이 가진 고유의 x를 말하고, 즉 private으로 설정된 x의 값을 매개변수의 값으로 바꿔주겠다는 뜻
	}
	
	public void setY(int y) { 
		this.y=y;
	}
	
	//이게 바로 자바에서 제공하는 객체지향 프로그래밍의 기본적인 보안이라고 할 수 있다.
	
	public Node(int x, int y) { //생성자, 객체를 하나 만들어줄때 자동으로 값을 초기화해주는 하나의 함수, 클래스와 동일한 이름을 가짐
		this.x=x;
		this.y=y;
	}
	
	public Node getCenter(Node other) { //현재 노드와 다른 노드의 값을 비교해서 정중앙 값을 가지는 하나의 새로운 노드를 반환
		return new Node((this.x+other.getX())/2, (this.y+other.getY())/2); 
	}
	
}


private get set이 항상 이런식으로 만들어줘야하고, 세계적인 표준으로 사용되고 있기 때문에 자바에서 get변수와 set변수를 한번에 만들어주는 기능을 제공하고있음. 우클릭 -> source -> generate getter setter -> select All
마찬가지로 생성자도 만들 수 있음 우클릭 -> source -> constructor using field
