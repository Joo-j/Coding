final static double PI=3.141592;

절대 변하지 않는 특정한 것을 정하고 싶을 때는 최종(final)을 사용합니다. 이 키워드는 변수, 메소드, 클래스에 모두 사용할 수 있습니다. 변수에 사용할 경우 변하지 않는 상수가 되며, 메소드가 사용할 때는 재정의가 불가능한 메소드가 되며, 클래스에 사용할 때는 상속이 불가능한 하나의 완전한 클래스가 되는 것 입니다.


final 변수

public class Main{

	public static void main(String[] args) {

		->
		final int number = 10; //즉 상수가 된다고 할 수 있다.
		//number=5; 오류 발생
		System.out.println(number);
		
	}

}
////////////////////////////////////////////////////////////////////////

final 메소드

public class Main extends Parent{ 

	public void show()// 함수의 재정의, 오버라이딩, 메인에서 상속받으면서 오버라이딩 하기 때문에 기능의 내용이 바뀔 수 있음, 
부모 클래스의 함수가 final로 바뀜에 따라 오버라이딩 불가
	{
		System.out.println("HELLO");
	}
	
	public static void main(String[] args) {

		Main m = new Main();
		m.show(); //부모 클래스에서 show라는 함수를 그대로 가져왔기 때문에 그냥 사용 가능
	
	}

}

public class Parent {
            ->
            public final void show() {   //final로 바꿔줌으로써 오버라이딩 불가능
		System.out.println("Hi");
	}
}

////////////////////////////////////////////////////////////////////////



final 클래스


//부모 클래스가 final 클래스가 되므로 인해 메인에서 상속 불가능, 오버라이딩도 불가능

public class Main extends Parent{ 

	public void show()
	{
		System.out.println("HELLO");
	}
	
	public static void main(String[] args) {

		Main m = new Main();
		m.show(); //부모 클래스에서 show라는 함수를 그대로 가져왔기 때문에 그냥 사용 가능
	
	}

}


->
final class Parent { //final로 바꿔줌으로써 메인에서 상속 불가능, 오버라이딩도 불가능

	public void show() {
		System.out.println("Hi");
	}
}

