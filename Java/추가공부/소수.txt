2부터 자기자신 앞까지의 값을 자신과 나눠보면서 나머지가 0이 되도록 나눠지는 경우가 있으면 소수가 아닌 것이고 그런 경우가 없으면 소수로 판단하도록 함수를 만들어 반복문의 매 인덱스마다 검사 

package j;

import java.util.Scanner;

public class Main{
public static void main(String[] args) throws Exception {
Scanner sc =new Scanner(System.in);
	
int m = sc.nextInt();
int n = sc.nextInt();
int sum=0, count=0;

for(int i=m; i<n+1; i++) {
	if(prime(i)) {
		if(count==0) count=i;
		sum+=i;
	}
}
if(sum==0) System.out.println("-1");
else{
	System.out.println(sum);
	System.out.println(count);
}
sc.close();
 }

public static boolean prime(int i) {
    if(i==1) return false;
	for(int j=2; j<i; j++) {
    	 if(i%j==0) return false;
     }	
  return true;
   }
}





미리 값 넣어 놓기
public static void prime(int a[]) {
        for(int i=2; i<a.length; i++) {
        	if(a[i]==1) continue;
        	for(int j=i*2; i<a.length; j+=i) { //4 6 8은 소수가 아니지만 2는 소수이기 때문에 2를 보호차 i*2로 못박고 4부터 시작하도록 한다
        		a[j]=1;
        	}
        }
    }