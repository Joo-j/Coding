import java.util.LinkedList;

public class Document{
int idx;
int prioritie;

public Document(int idx, int prioritie){
this.idx = idx;
this.prioritie = prioritie;
}
}

class Solution {
public int solution(int[] priorites, int location){
LinkedList<Document> list = new LinkedList<Document>();

for(int i = 0; i<priorities.length, i++){
list.add(new Document(i, priorities[i]));
}

int answer = 1;

Document firstDc = null

while(list.size()>1){
firstDc = list.getFirst();
for(int i =1; i<list.size(); i++){
if(firstDc.prioritie<list.get(i).prioritie){
list.addLast(firstDc);
list.removeFirst();
break; //중요
}

if(i==list.size()-1){ //뒤에 더 큰수가 있는지 검사하는 반복문에 break이 있기 때문에 모든 정렬이 이루어지고 난 후에만 올 수 있음
if(firstDc.idx == location) return answer;
list.removeFirst();
answer++; // 정렬되있는 상태에서 location에 있던 값을 출력해야하기 때문에 설정해놓은 firstDc와 다를때 다음으로 넘기면서 순서를 넘기
}
}
}
return answer;
}
}

 
location 0

1
(1)19111

2   
 19111(1)
 
3
  9111(1)1
answer = 1 //출력은 0이아닌 1부터 세기때문
4
   9111(1)1
  9의 인덱스는 3인데 location은 0이기 때문에 패스
  첫번째 삭제 
  answer+1 , 2
5
  111(1)1
  1의 인덱스는 4인데 location은 0이기 때문에 패스
  첫번째 삭제
  answer+1 , 3
6
  11(1)1
  1의 인덱스는 5인데 location은 0이기 때문에 패스
  첫번째 삭제
  answer+1 , 4

7
  1(1)1
  1의 인덱스는 6인데 location은 0이기 때문에 패스
  첫번째 삭제
  answer+1 , 5

8
  (1)1
  1의 인덱스는 0이기 때문에 answer 출력

LinkedList를 이용하여 간단히 풀 수 있었던 문제였습니다.



(line 3 ~ 11)

중요도와 index가 함께 묶여야할 요소이므로 따로 Document라는 클래스를 정의하여 주어진 배열의 값을 Document로 변환하였습니다.



(line 15 ~ 19)

LinekedList를 생성하여 Document로 변환한 값을 순차적으로 넣어주었습니다.



(line 28 ~ 44)

문제 설명의 1,2,3 번에 나온것 처럼 LinkedList의 가장 처음 값을 firstDc에 저장해두고 그 다음 값과 비교하여 중요도가 더 높은 문서가 있으면 맨 뒤로 보내고 List의 마지막(i=list.size()-1)에 도달하였을때까지 더 중요한 문서가 없다면 인쇄를 합니다.

인쇄가 완료되었으면 인쇄 순번을 올려주면서 위 과정을 반복하게되면 location과 일치하는 index를 가진 문서가 인쇄될 때 answer를 출력하게 됩니다.



(line 45)

list.size()가 1일 경우 마지막 문서이므로 바로 answer를 출력해주면 됩니다.